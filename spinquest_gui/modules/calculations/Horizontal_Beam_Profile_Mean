import os
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QAction, QVBoxLayout, QWidget
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
import pandas as pd
import pandas as pd
import random
import time
import os
from PyQt5.QtCore import QTimer
from matplotlib.ticker import MaxNLocator
import numpy as np

# Function to generate random numbers in specified ranges
def generate_random_numbers():
    random_negative_15_to_25 = random.randint(-25, -15)
    random_0_to_3 = random.randint(0, 3)
    return random_negative_15_to_25, random_0_to_3

def generate_random_numbers1():
    random_negative_15_to_25_1 = random.randint(-25, -15)
    random_0_to_3_1 = random.randint(0, 3)
    return random_negative_15_to_25_1, random_0_to_3_1

# Function to modify the TSV file
def modify_tsv_file(main_filename):
    # Read the main TSV file to get its structure
    df = pd.read_csv(main_filename, sep='\t')
    random_numbers_for_mean = np.random.normal(loc=-22, scale=1, size=1000)
    random_numbers_for_std_dev = np.random.normal(loc=1.5, scale=.75, size=1000)
    mean = np.mean(random_numbers_for_mean)
    std_dev=np.mean(random_numbers_for_std_dev)

    random_numbers_for_mean1 = np.random.normal(loc=-22, scale=1, size=1000)
    random_numbers_for_std_dev1 = np.random.normal(loc=2, scale=.75, size=1000)
    mean1=np.mean(random_numbers_for_mean1)
    std_dev1=np.mean(random_numbers_for_std_dev1)

    # Generate random numbers for modification
    
    #random_num1= random.randint(-25,-15)
    #random_num2=random.randint(0,3)
    #random_num3= random.randint(-25,-15)
    #random_num4= random.randint(0,3)
    random_num1=mean
    random_num2=std_dev
    random_num3=mean1
    random_num4=std_dev1

    
  

    # Modify the specified rows and columns
    df.iloc[9, 2] = random_num1
    df.iloc[10, 2] = random_num2
    df.iloc[11, 2] = random_num3
    df.iloc[12, 2] = random_num4

    return df

# Specify the location of the 'data' folder
data_folder_path = r'C:\Users\Sebma\OneDrive\Desktop\Raw_Data'

# Create the 'data' directory if it doesn't exist
if not os.path.exists(data_folder_path):
    os.makedirs(data_folder_path)

# Path to the main TSV file
main_tsv_file = r'C:\Users\Sebma\OneDrive\Desktop\spill_001855691_Acnet.tsv'

# Counter to keep track of generated TSV files
num_generated_files = 0

# Main loop to generate and save modified TSV files every 10 seconds
while num_generated_files < 10:
    # Generate and save modified TSV files
    modified_df = modify_tsv_file(main_tsv_file)
    modified_filename = os.path.join(data_folder_path, f'modified_file_{num_generated_files + 1}.tsv')
    modified_df.to_csv(modified_filename, sep='\t', index=False)
    print(f"Generated and saved {modified_filename}")
    
    num_generated_files += 1
    time.sleep(10)

print("Generated 10 TSV files. Exiting the script.")

import os
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QAction, QVBoxLayout, QWidget
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
import pandas as pd
from PyQt5.QtCore import QTimer

class HistogramGenerator(QMainWindow):
    def __init__(self):
        super().__init__()

        self.initUI()
        self.current_index = 0
        self.generate_histogram()

    def initUI(self):
        self.setWindowTitle('Histogram Generator')
        self.setGeometry(100, 100, 800, 600)

        # Menu bar
        menu_bar = self.menuBar()
        file_menu = menu_bar.addMenu('File')

        # Exit action
        exit_action = QAction('Exit', self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout()
        self.central_widget.setLayout(self.layout)

        # Matplotlib figure
        self.figure = plt.figure()
        self.canvas = FigureCanvas(self.figure)
        self.layout.addWidget(self.canvas)

    def generate_histogram(self):
        # Find TSV files in a specified directory
        directory = r'C:\Users\Sebma\OneDrive\Desktop\Raw_Data'

        tsv_files = [f for f in os.listdir(directory) if f.endswith('.tsv')]

        if not tsv_files:
            print("No TSV files found in the directory.")
            return

        # Get the next 5 TSV files
        files_to_process = tsv_files[self.current_index:self.current_index + 5]

        if not files_to_process:
            print("No more TSV files to process.")
            return

        data = []
        for file_name in files_to_process:
            file_path = os.path.join(directory, file_name)
            df = pd.read_csv(file_path, sep='\t')
            data.append(df.iloc[9, 2])

        # Sort data in ascending order
        data.sort()

        if not data:
            print("No data found.")
            return

        # Clear previous plot
        self.figure.clear()

        # Create new histogram
        ax = self.figure.add_subplot(111)
        ax.hist(data, bins=10)
        ax.set_xlabel('Value')
        ax.set_ylabel('Frequency')
        ax.yaxis.set_major_locator(MaxNLocator(integer=True))
        ax.set_title('Histogram of Mean for Horizontal Beam Profile')
        ax.grid(True)

        # Save histogram to a folder on the desktop
        
        save_folder = r'C:\Users\Sebma\OneDrive\Desktop\Generated_Histograms'
        

# Create the 'data' directory if it doesn't exist
        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        save_path = os.path.join(save_folder, f'histogram_{self.current_index + 1}.png')
        self.figure.savefig(save_path)

        # Draw the canvas
        self.canvas.draw()

        # Increment the current index for the next set of TSV files
        self.current_index += 5

        # Schedule next histogram generation after 10 seconds
        QTimer.singleShot(10000, self.generate_histogram)

def main():
    app = QApplication(sys.argv)
    window = HistogramGenerator()
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()

